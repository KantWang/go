// Code generated by goa v3.10.0, DO NOT EDIT.
//
// objects views
//
// Command:
// $ goa gen objects/design

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// NearEarthObjectManagementCollection is the viewed result type that is
// projected based on a view.
type NearEarthObjectManagementCollection struct {
	// Type to project
	Projected NearEarthObjectManagementCollectionView
	// View to render
	View string
}

// NearEarthObjectManagement is the viewed result type that is projected based
// on a view.
type NearEarthObjectManagement struct {
	// Type to project
	Projected *NearEarthObjectManagementView
	// View to render
	View string
}

// NearEarthObjectManagementCollectionView is a type that runs validations on a
// projected type.
type NearEarthObjectManagementCollectionView []*NearEarthObjectManagementView

// NearEarthObjectManagementView is a type that runs validations on a projected
// type.
type NearEarthObjectManagementView struct {
	// object ID
	ID *int
	// object Name
	Name *string
	// object observation time
	ObservationTime *int64
	// object observation date
	ObservationDate *string
}

var (
	// NearEarthObjectManagementCollectionMap is a map indexing the attribute names
	// of NearEarthObjectManagementCollection by view name.
	NearEarthObjectManagementCollectionMap = map[string][]string{
		"default": {
			"Id",
			"Name",
			"ObservationTime",
			"ObservationDate",
		},
	}
	// NearEarthObjectManagementMap is a map indexing the attribute names of
	// NearEarthObjectManagement by view name.
	NearEarthObjectManagementMap = map[string][]string{
		"default": {
			"Id",
			"Name",
			"ObservationTime",
			"ObservationDate",
		},
	}
)

// ValidateNearEarthObjectManagementCollection runs the validations defined on
// the viewed result type NearEarthObjectManagementCollection.
func ValidateNearEarthObjectManagementCollection(result NearEarthObjectManagementCollection) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateNearEarthObjectManagementCollectionView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateNearEarthObjectManagement runs the validations defined on the viewed
// result type NearEarthObjectManagement.
func ValidateNearEarthObjectManagement(result *NearEarthObjectManagement) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateNearEarthObjectManagementView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateNearEarthObjectManagementCollectionView runs the validations defined
// on NearEarthObjectManagementCollectionView using the "default" view.
func ValidateNearEarthObjectManagementCollectionView(result NearEarthObjectManagementCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateNearEarthObjectManagementView(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateNearEarthObjectManagementView runs the validations defined on
// NearEarthObjectManagementView using the "default" view.
func ValidateNearEarthObjectManagementView(result *NearEarthObjectManagementView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Id", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("Name", "result"))
	}
	if result.ObservationTime == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("ObservationTime", "result"))
	}
	if result.ObservationDate == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("ObservationDate", "result"))
	}
	return
}
