// Code generated by goa v3.10.0, DO NOT EDIT.
//
// objects HTTP client CLI support package
//
// Command:
// $ goa gen objects/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	objectsc "objects/gen/http/objects/client"
	"os"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `objects (list|find|add|update|delete)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` objects list --observation-date "Inventore optio similique saepe." --offset 7967773242683530585` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		objectsFlags = flag.NewFlagSet("objects", flag.ContinueOnError)

		objectsListFlags               = flag.NewFlagSet("list", flag.ExitOnError)
		objectsListObservationDateFlag = objectsListFlags.String("observation-date", "REQUIRED", "")
		objectsListOffsetFlag          = objectsListFlags.String("offset", "REQUIRED", "")

		objectsFindFlags  = flag.NewFlagSet("find", flag.ExitOnError)
		objectsFindIDFlag = objectsFindFlags.String("id", "REQUIRED", "")

		objectsAddFlags    = flag.NewFlagSet("add", flag.ExitOnError)
		objectsAddBodyFlag = objectsAddFlags.String("body", "REQUIRED", "")

		objectsUpdateFlags               = flag.NewFlagSet("update", flag.ExitOnError)
		objectsUpdateIDFlag              = objectsUpdateFlags.String("id", "REQUIRED", "")
		objectsUpdateNameFlag            = objectsUpdateFlags.String("name", "", "")
		objectsUpdateObservationTimeFlag = objectsUpdateFlags.String("observation-time", "", "")

		objectsDeleteFlags  = flag.NewFlagSet("delete", flag.ExitOnError)
		objectsDeleteIDFlag = objectsDeleteFlags.String("id", "REQUIRED", "")
	)
	objectsFlags.Usage = objectsUsage
	objectsListFlags.Usage = objectsListUsage
	objectsFindFlags.Usage = objectsFindUsage
	objectsAddFlags.Usage = objectsAddUsage
	objectsUpdateFlags.Usage = objectsUpdateUsage
	objectsDeleteFlags.Usage = objectsDeleteUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "objects":
			svcf = objectsFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "objects":
			switch epn {
			case "list":
				epf = objectsListFlags

			case "find":
				epf = objectsFindFlags

			case "add":
				epf = objectsAddFlags

			case "update":
				epf = objectsUpdateFlags

			case "delete":
				epf = objectsDeleteFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "objects":
			c := objectsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "list":
				endpoint = c.List()
				data, err = objectsc.BuildListPayload(*objectsListObservationDateFlag, *objectsListOffsetFlag)
			case "find":
				endpoint = c.Find()
				data, err = objectsc.BuildFindPayload(*objectsFindIDFlag)
			case "add":
				endpoint = c.Add()
				data, err = objectsc.BuildAddPayload(*objectsAddBodyFlag)
			case "update":
				endpoint = c.Update()
				data, err = objectsc.BuildUpdatePayload(*objectsUpdateIDFlag, *objectsUpdateNameFlag, *objectsUpdateObservationTimeFlag)
			case "delete":
				endpoint = c.Delete()
				data, err = objectsc.BuildDeletePayload(*objectsDeleteIDFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// objectsUsage displays the usage of the objects command and its subcommands.
func objectsUsage() {
	fmt.Fprintf(os.Stderr, `API Server
Usage:
    %[1]s [globalflags] objects COMMAND [flags]

COMMAND:
    list: List implements list.
    find: Find implements find.
    add: Add implements add.
    update: Update implements update.
    delete: Delete implements delete.

Additional help:
    %[1]s objects COMMAND --help
`, os.Args[0])
}
func objectsListUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] objects list -observation-date STRING -offset INT

List implements list.
    -observation-date STRING: 
    -offset INT: 

Example:
    %[1]s objects list --observation-date "Inventore optio similique saepe." --offset 7967773242683530585
`, os.Args[0])
}

func objectsFindUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] objects find -id INT

Find implements find.
    -id INT: 

Example:
    %[1]s objects find --id 1451298382392885124
`, os.Args[0])
}

func objectsAddUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] objects add -body JSON

Add implements add.
    -body JSON: 

Example:
    %[1]s objects add --body '{
      "Id": 7131537522164841527,
      "Name": "Voluptatem aut et voluptas at iure.",
      "ObservationTime": 8010974902666053389
   }'
`, os.Args[0])
}

func objectsUpdateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] objects update -id INT -name STRING -observation-time INT64

Update implements update.
    -id INT: 
    -name STRING: 
    -observation-time INT64: 

Example:
    %[1]s objects update --id 8308225419337628198 --name "Quae est molestiae laboriosam non." --observation-time 9216547178382164371
`, os.Args[0])
}

func objectsDeleteUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] objects delete -id INT

Delete implements delete.
    -id INT: 

Example:
    %[1]s objects delete --id 8483938586563744796
`, os.Args[0])
}
