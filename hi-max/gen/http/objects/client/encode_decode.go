// Code generated by goa v3.10.0, DO NOT EDIT.
//
// objects HTTP client encoders and decoders
//
// Command:
// $ goa gen objects/design

package client

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"net/http"
	"net/url"
	objects "objects/gen/objects"
	objectsviews "objects/gen/objects/views"

	goahttp "goa.design/goa/v3/http"
)

// BuildListRequest instantiates a HTTP request object with method and path set
// to call the "objects" service "list" endpoint
func (c *Client) BuildListRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListObjectsPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("objects", "list", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeListRequest returns an encoder for requests sent to the objects list
// server.
func EncodeListRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*objects.ListPayload)
		if !ok {
			return goahttp.ErrInvalidType("objects", "list", "*objects.ListPayload", v)
		}
		values := req.URL.Query()
		values.Add("ObservationDate", p.ObservationDate)
		values.Add("Offset", fmt.Sprintf("%v", p.Offset))
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeListResponse returns a decoder for responses returned by the objects
// list endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeListResponse may return the following errors:
//   - "wrong_date_format" (type *goa.ServiceError): http.StatusBadRequest
//   - "wrong_offset_format" (type *goa.ServiceError): http.StatusBadRequest
//   - "internal_server" (type *goa.ServiceError): http.StatusInternalServerError
//   - error: internal error
func DecodeListResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("objects", "list", err)
			}
			p := NewListNearEarthObjectManagementCollectionOK(body)
			view := "default"
			vres := objectsviews.NearEarthObjectManagementCollection{Projected: p, View: view}
			if err = objectsviews.ValidateNearEarthObjectManagementCollection(vres); err != nil {
				return nil, goahttp.ErrValidationError("objects", "list", err)
			}
			res := objects.NewNearEarthObjectManagementCollection(vres)
			return res, nil
		case http.StatusBadRequest:
			en := resp.Header.Get("goa-error")
			switch en {
			case "wrong_date_format":
				var (
					body ListWrongDateFormatResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("objects", "list", err)
				}
				err = ValidateListWrongDateFormatResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("objects", "list", err)
				}
				return nil, NewListWrongDateFormat(&body)
			case "wrong_offset_format":
				var (
					body ListWrongOffsetFormatResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("objects", "list", err)
				}
				err = ValidateListWrongOffsetFormatResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("objects", "list", err)
				}
				return nil, NewListWrongOffsetFormat(&body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("objects", "list", resp.StatusCode, string(body))
			}
		case http.StatusInternalServerError:
			var (
				body ListInternalServerResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("objects", "list", err)
			}
			err = ValidateListInternalServerResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("objects", "list", err)
			}
			return nil, NewListInternalServer(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("objects", "list", resp.StatusCode, string(body))
		}
	}
}

// BuildFindRequest instantiates a HTTP request object with method and path set
// to call the "objects" service "find" endpoint
func (c *Client) BuildFindRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id int
	)
	{
		p, ok := v.(*objects.FindPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("objects", "find", "*objects.FindPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: FindObjectsPath(id)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("objects", "find", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeFindResponse returns a decoder for responses returned by the objects
// find endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeFindResponse may return the following errors:
//   - "not_found" (type *goa.ServiceError): http.StatusNotFound
//   - "internal_server" (type *goa.ServiceError): http.StatusInternalServerError
//   - error: internal error
func DecodeFindResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body FindResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("objects", "find", err)
			}
			p := NewFindNearEarthObjectManagementOK(&body)
			view := "default"
			vres := &objectsviews.NearEarthObjectManagement{Projected: p, View: view}
			if err = objectsviews.ValidateNearEarthObjectManagement(vres); err != nil {
				return nil, goahttp.ErrValidationError("objects", "find", err)
			}
			res := objects.NewNearEarthObjectManagement(vres)
			return res, nil
		case http.StatusNotFound:
			var (
				body FindNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("objects", "find", err)
			}
			err = ValidateFindNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("objects", "find", err)
			}
			return nil, NewFindNotFound(&body)
		case http.StatusInternalServerError:
			var (
				body FindInternalServerResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("objects", "find", err)
			}
			err = ValidateFindInternalServerResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("objects", "find", err)
			}
			return nil, NewFindInternalServer(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("objects", "find", resp.StatusCode, string(body))
		}
	}
}

// BuildAddRequest instantiates a HTTP request object with method and path set
// to call the "objects" service "add" endpoint
func (c *Client) BuildAddRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: AddObjectsPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("objects", "add", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeAddRequest returns an encoder for requests sent to the objects add
// server.
func EncodeAddRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*objects.AddPayload)
		if !ok {
			return goahttp.ErrInvalidType("objects", "add", "*objects.AddPayload", v)
		}
		body := p
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("objects", "add", err)
		}
		return nil
	}
}

// DecodeAddResponse returns a decoder for responses returned by the objects
// add endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeAddResponse may return the following errors:
//   - "wrong_id" (type *goa.ServiceError): http.StatusBadRequest
//   - "wrong_time" (type *goa.ServiceError): http.StatusBadRequest
//   - "already_exists" (type *goa.ServiceError): http.StatusBadRequest
//   - "internal_server" (type *goa.ServiceError): http.StatusInternalServerError
//   - error: internal error
func DecodeAddResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body bool
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("objects", "add", err)
			}
			return body, nil
		case http.StatusBadRequest:
			en := resp.Header.Get("goa-error")
			switch en {
			case "wrong_id":
				var (
					body AddWrongIDResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("objects", "add", err)
				}
				err = ValidateAddWrongIDResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("objects", "add", err)
				}
				return nil, NewAddWrongID(&body)
			case "wrong_time":
				var (
					body AddWrongTimeResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("objects", "add", err)
				}
				err = ValidateAddWrongTimeResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("objects", "add", err)
				}
				return nil, NewAddWrongTime(&body)
			case "already_exists":
				var (
					body AddAlreadyExistsResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("objects", "add", err)
				}
				err = ValidateAddAlreadyExistsResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("objects", "add", err)
				}
				return nil, NewAddAlreadyExists(&body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("objects", "add", resp.StatusCode, string(body))
			}
		case http.StatusInternalServerError:
			var (
				body AddInternalServerResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("objects", "add", err)
			}
			err = ValidateAddInternalServerResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("objects", "add", err)
			}
			return nil, NewAddInternalServer(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("objects", "add", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdateRequest instantiates a HTTP request object with method and path
// set to call the "objects" service "update" endpoint
func (c *Client) BuildUpdateRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id int
	)
	{
		p, ok := v.(*objects.UpdatePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("objects", "update", "*objects.UpdatePayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateObjectsPath(id)}
	req, err := http.NewRequest("PATCH", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("objects", "update", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateRequest returns an encoder for requests sent to the objects
// update server.
func EncodeUpdateRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*objects.UpdatePayload)
		if !ok {
			return goahttp.ErrInvalidType("objects", "update", "*objects.UpdatePayload", v)
		}
		values := req.URL.Query()
		if p.Name != nil {
			values.Add("Name", *p.Name)
		}
		if p.ObservationTime != nil {
			values.Add("ObservationTime", fmt.Sprintf("%v", *p.ObservationTime))
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeUpdateResponse returns a decoder for responses returned by the objects
// update endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeUpdateResponse may return the following errors:
//   - "wrong_id" (type *goa.ServiceError): http.StatusBadRequest
//   - "wrong_time" (type *goa.ServiceError): http.StatusBadRequest
//   - "nothing_to_update" (type *goa.ServiceError): http.StatusBadRequest
//   - "internal_server" (type *goa.ServiceError): http.StatusInternalServerError
//   - error: internal error
func DecodeUpdateResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body bool
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("objects", "update", err)
			}
			return body, nil
		case http.StatusBadRequest:
			en := resp.Header.Get("goa-error")
			switch en {
			case "wrong_id":
				var (
					body UpdateWrongIDResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("objects", "update", err)
				}
				err = ValidateUpdateWrongIDResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("objects", "update", err)
				}
				return nil, NewUpdateWrongID(&body)
			case "wrong_time":
				var (
					body UpdateWrongTimeResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("objects", "update", err)
				}
				err = ValidateUpdateWrongTimeResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("objects", "update", err)
				}
				return nil, NewUpdateWrongTime(&body)
			case "nothing_to_update":
				var (
					body UpdateNothingToUpdateResponseBody
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("objects", "update", err)
				}
				err = ValidateUpdateNothingToUpdateResponseBody(&body)
				if err != nil {
					return nil, goahttp.ErrValidationError("objects", "update", err)
				}
				return nil, NewUpdateNothingToUpdate(&body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("objects", "update", resp.StatusCode, string(body))
			}
		case http.StatusInternalServerError:
			var (
				body UpdateInternalServerResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("objects", "update", err)
			}
			err = ValidateUpdateInternalServerResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("objects", "update", err)
			}
			return nil, NewUpdateInternalServer(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("objects", "update", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteRequest instantiates a HTTP request object with method and path
// set to call the "objects" service "delete" endpoint
func (c *Client) BuildDeleteRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id int
	)
	{
		p, ok := v.(*objects.DeletePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("objects", "delete", "*objects.DeletePayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteObjectsPath(id)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("objects", "delete", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeDeleteResponse returns a decoder for responses returned by the objects
// delete endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeDeleteResponse may return the following errors:
//   - "not_found" (type *goa.ServiceError): http.StatusNotFound
//   - "internal_server" (type *goa.ServiceError): http.StatusInternalServerError
//   - error: internal error
func DecodeDeleteResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body bool
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("objects", "delete", err)
			}
			return body, nil
		case http.StatusNotFound:
			var (
				body DeleteNotFoundResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("objects", "delete", err)
			}
			err = ValidateDeleteNotFoundResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("objects", "delete", err)
			}
			return nil, NewDeleteNotFound(&body)
		case http.StatusInternalServerError:
			var (
				body DeleteInternalServerResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("objects", "delete", err)
			}
			err = ValidateDeleteInternalServerResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("objects", "delete", err)
			}
			return nil, NewDeleteInternalServer(&body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("objects", "delete", resp.StatusCode, string(body))
		}
	}
}

// unmarshalNearEarthObjectManagementResponseToObjectsviewsNearEarthObjectManagementView
// builds a value of type *objectsviews.NearEarthObjectManagementView from a
// value of type *NearEarthObjectManagementResponse.
func unmarshalNearEarthObjectManagementResponseToObjectsviewsNearEarthObjectManagementView(v *NearEarthObjectManagementResponse) *objectsviews.NearEarthObjectManagementView {
	res := &objectsviews.NearEarthObjectManagementView{
		ID:              v.ID,
		Name:            v.Name,
		ObservationTime: v.ObservationTime,
		ObservationDate: v.ObservationDate,
	}

	return res
}
