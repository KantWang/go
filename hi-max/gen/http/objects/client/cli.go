// Code generated by goa v3.10.0, DO NOT EDIT.
//
// objects HTTP client CLI support package
//
// Command:
// $ goa gen objects/design

package client

import (
	"encoding/json"
	"fmt"
	objects "objects/gen/objects"
	"strconv"
)

// BuildListPayload builds the payload for the objects list endpoint from CLI
// flags.
func BuildListPayload(objectsListObservationDate string, objectsListOffset string) (*objects.ListPayload, error) {
	var err error
	var observationDate string
	{
		observationDate = objectsListObservationDate
	}
	var offset int
	{
		var v int64
		v, err = strconv.ParseInt(objectsListOffset, 10, strconv.IntSize)
		offset = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for offset, must be INT")
		}
	}
	v := &objects.ListPayload{}
	v.ObservationDate = observationDate
	v.Offset = offset

	return v, nil
}

// BuildFindPayload builds the payload for the objects find endpoint from CLI
// flags.
func BuildFindPayload(objectsFindID string) (*objects.FindPayload, error) {
	var err error
	var id int
	{
		var v int64
		v, err = strconv.ParseInt(objectsFindID, 10, strconv.IntSize)
		id = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be INT")
		}
	}
	v := &objects.FindPayload{}
	v.ID = id

	return v, nil
}

// BuildAddPayload builds the payload for the objects add endpoint from CLI
// flags.
func BuildAddPayload(objectsAddBody string) (*objects.AddPayload, error) {
	var err error
	var body struct {
		ID              *int    `form:"Id" json:"Id" xml:"Id"`
		Name            *string `form:"Name" json:"Name" xml:"Name"`
		ObservationTime *int64  `form:"ObservationTime" json:"ObservationTime" xml:"ObservationTime"`
	}
	{
		err = json.Unmarshal([]byte(objectsAddBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"Id\": 7131537522164841527,\n      \"Name\": \"Voluptatem aut et voluptas at iure.\",\n      \"ObservationTime\": 8010974902666053389\n   }'")
		}
	}
	v := &objects.AddPayload{}
	if body.ID != nil {
		v.ID = *body.ID
	}
	if body.Name != nil {
		v.Name = *body.Name
	}
	if body.ObservationTime != nil {
		v.ObservationTime = *body.ObservationTime
	}

	return v, nil
}

// BuildUpdatePayload builds the payload for the objects update endpoint from
// CLI flags.
func BuildUpdatePayload(objectsUpdateID string, objectsUpdateName string, objectsUpdateObservationTime string) (*objects.UpdatePayload, error) {
	var err error
	var id int
	{
		var v int64
		v, err = strconv.ParseInt(objectsUpdateID, 10, strconv.IntSize)
		id = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be INT")
		}
	}
	var name *string
	{
		if objectsUpdateName != "" {
			name = &objectsUpdateName
		}
	}
	var observationTime *int64
	{
		if objectsUpdateObservationTime != "" {
			val, err := strconv.ParseInt(objectsUpdateObservationTime, 10, 64)
			observationTime = &val
			if err != nil {
				return nil, fmt.Errorf("invalid value for observationTime, must be INT64")
			}
		}
	}
	v := &objects.UpdatePayload{}
	v.ID = id
	v.Name = name
	v.ObservationTime = observationTime

	return v, nil
}

// BuildDeletePayload builds the payload for the objects delete endpoint from
// CLI flags.
func BuildDeletePayload(objectsDeleteID string) (*objects.DeletePayload, error) {
	var err error
	var id int
	{
		var v int64
		v, err = strconv.ParseInt(objectsDeleteID, 10, strconv.IntSize)
		id = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for id, must be INT")
		}
	}
	v := &objects.DeletePayload{}
	v.ID = id

	return v, nil
}
