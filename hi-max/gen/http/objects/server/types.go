// Code generated by goa v3.10.0, DO NOT EDIT.
//
// objects HTTP server types
//
// Command:
// $ goa gen objects/design

package server

import (
	objects "objects/gen/objects"
	objectsviews "objects/gen/objects/views"

	goa "goa.design/goa/v3/pkg"
)

// NearEarthObjectManagementResponseCollection is the type of the "objects"
// service "list" endpoint HTTP response body.
type NearEarthObjectManagementResponseCollection []*NearEarthObjectManagementResponse

// FindResponseBody is the type of the "objects" service "find" endpoint HTTP
// response body.
type FindResponseBody struct {
	// object ID
	ID int `form:"Id" json:"Id" xml:"Id"`
	// object Name
	Name string `form:"Name" json:"Name" xml:"Name"`
	// object observation time
	ObservationTime int64 `form:"ObservationTime" json:"ObservationTime" xml:"ObservationTime"`
	// object observation date
	ObservationDate string `form:"ObservationDate" json:"ObservationDate" xml:"ObservationDate"`
}

// ListWrongDateFormatResponseBody is the type of the "objects" service "list"
// endpoint HTTP response body for the "wrong_date_format" error.
type ListWrongDateFormatResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListWrongOffsetFormatResponseBody is the type of the "objects" service
// "list" endpoint HTTP response body for the "wrong_offset_format" error.
type ListWrongOffsetFormatResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListInternalServerResponseBody is the type of the "objects" service "list"
// endpoint HTTP response body for the "internal_server" error.
type ListInternalServerResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// FindNotFoundResponseBody is the type of the "objects" service "find"
// endpoint HTTP response body for the "not_found" error.
type FindNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// FindInternalServerResponseBody is the type of the "objects" service "find"
// endpoint HTTP response body for the "internal_server" error.
type FindInternalServerResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// AddWrongIDResponseBody is the type of the "objects" service "add" endpoint
// HTTP response body for the "wrong_id" error.
type AddWrongIDResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// AddWrongTimeResponseBody is the type of the "objects" service "add" endpoint
// HTTP response body for the "wrong_time" error.
type AddWrongTimeResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// AddAlreadyExistsResponseBody is the type of the "objects" service "add"
// endpoint HTTP response body for the "already_exists" error.
type AddAlreadyExistsResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// AddInternalServerResponseBody is the type of the "objects" service "add"
// endpoint HTTP response body for the "internal_server" error.
type AddInternalServerResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateWrongIDResponseBody is the type of the "objects" service "update"
// endpoint HTTP response body for the "wrong_id" error.
type UpdateWrongIDResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateWrongTimeResponseBody is the type of the "objects" service "update"
// endpoint HTTP response body for the "wrong_time" error.
type UpdateWrongTimeResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateNothingToUpdateResponseBody is the type of the "objects" service
// "update" endpoint HTTP response body for the "nothing_to_update" error.
type UpdateNothingToUpdateResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateInternalServerResponseBody is the type of the "objects" service
// "update" endpoint HTTP response body for the "internal_server" error.
type UpdateInternalServerResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteNotFoundResponseBody is the type of the "objects" service "delete"
// endpoint HTTP response body for the "not_found" error.
type DeleteNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteInternalServerResponseBody is the type of the "objects" service
// "delete" endpoint HTTP response body for the "internal_server" error.
type DeleteInternalServerResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// NearEarthObjectManagementResponse is used to define fields on response body
// types.
type NearEarthObjectManagementResponse struct {
	// object ID
	ID int `form:"Id" json:"Id" xml:"Id"`
	// object Name
	Name string `form:"Name" json:"Name" xml:"Name"`
	// object observation time
	ObservationTime int64 `form:"ObservationTime" json:"ObservationTime" xml:"ObservationTime"`
	// object observation date
	ObservationDate string `form:"ObservationDate" json:"ObservationDate" xml:"ObservationDate"`
}

// NewNearEarthObjectManagementResponseCollection builds the HTTP response body
// from the result of the "list" endpoint of the "objects" service.
func NewNearEarthObjectManagementResponseCollection(res objectsviews.NearEarthObjectManagementCollectionView) NearEarthObjectManagementResponseCollection {
	body := make([]*NearEarthObjectManagementResponse, len(res))
	for i, val := range res {
		body[i] = marshalObjectsviewsNearEarthObjectManagementViewToNearEarthObjectManagementResponse(val)
	}
	return body
}

// NewFindResponseBody builds the HTTP response body from the result of the
// "find" endpoint of the "objects" service.
func NewFindResponseBody(res *objectsviews.NearEarthObjectManagementView) *FindResponseBody {
	body := &FindResponseBody{
		ID:              *res.ID,
		Name:            *res.Name,
		ObservationTime: *res.ObservationTime,
		ObservationDate: *res.ObservationDate,
	}
	return body
}

// NewListWrongDateFormatResponseBody builds the HTTP response body from the
// result of the "list" endpoint of the "objects" service.
func NewListWrongDateFormatResponseBody(res *goa.ServiceError) *ListWrongDateFormatResponseBody {
	body := &ListWrongDateFormatResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListWrongOffsetFormatResponseBody builds the HTTP response body from the
// result of the "list" endpoint of the "objects" service.
func NewListWrongOffsetFormatResponseBody(res *goa.ServiceError) *ListWrongOffsetFormatResponseBody {
	body := &ListWrongOffsetFormatResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListInternalServerResponseBody builds the HTTP response body from the
// result of the "list" endpoint of the "objects" service.
func NewListInternalServerResponseBody(res *goa.ServiceError) *ListInternalServerResponseBody {
	body := &ListInternalServerResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewFindNotFoundResponseBody builds the HTTP response body from the result of
// the "find" endpoint of the "objects" service.
func NewFindNotFoundResponseBody(res *goa.ServiceError) *FindNotFoundResponseBody {
	body := &FindNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewFindInternalServerResponseBody builds the HTTP response body from the
// result of the "find" endpoint of the "objects" service.
func NewFindInternalServerResponseBody(res *goa.ServiceError) *FindInternalServerResponseBody {
	body := &FindInternalServerResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewAddWrongIDResponseBody builds the HTTP response body from the result of
// the "add" endpoint of the "objects" service.
func NewAddWrongIDResponseBody(res *goa.ServiceError) *AddWrongIDResponseBody {
	body := &AddWrongIDResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewAddWrongTimeResponseBody builds the HTTP response body from the result of
// the "add" endpoint of the "objects" service.
func NewAddWrongTimeResponseBody(res *goa.ServiceError) *AddWrongTimeResponseBody {
	body := &AddWrongTimeResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewAddAlreadyExistsResponseBody builds the HTTP response body from the
// result of the "add" endpoint of the "objects" service.
func NewAddAlreadyExistsResponseBody(res *goa.ServiceError) *AddAlreadyExistsResponseBody {
	body := &AddAlreadyExistsResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewAddInternalServerResponseBody builds the HTTP response body from the
// result of the "add" endpoint of the "objects" service.
func NewAddInternalServerResponseBody(res *goa.ServiceError) *AddInternalServerResponseBody {
	body := &AddInternalServerResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateWrongIDResponseBody builds the HTTP response body from the result
// of the "update" endpoint of the "objects" service.
func NewUpdateWrongIDResponseBody(res *goa.ServiceError) *UpdateWrongIDResponseBody {
	body := &UpdateWrongIDResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateWrongTimeResponseBody builds the HTTP response body from the result
// of the "update" endpoint of the "objects" service.
func NewUpdateWrongTimeResponseBody(res *goa.ServiceError) *UpdateWrongTimeResponseBody {
	body := &UpdateWrongTimeResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateNothingToUpdateResponseBody builds the HTTP response body from the
// result of the "update" endpoint of the "objects" service.
func NewUpdateNothingToUpdateResponseBody(res *goa.ServiceError) *UpdateNothingToUpdateResponseBody {
	body := &UpdateNothingToUpdateResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateInternalServerResponseBody builds the HTTP response body from the
// result of the "update" endpoint of the "objects" service.
func NewUpdateInternalServerResponseBody(res *goa.ServiceError) *UpdateInternalServerResponseBody {
	body := &UpdateInternalServerResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteNotFoundResponseBody builds the HTTP response body from the result
// of the "delete" endpoint of the "objects" service.
func NewDeleteNotFoundResponseBody(res *goa.ServiceError) *DeleteNotFoundResponseBody {
	body := &DeleteNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteInternalServerResponseBody builds the HTTP response body from the
// result of the "delete" endpoint of the "objects" service.
func NewDeleteInternalServerResponseBody(res *goa.ServiceError) *DeleteInternalServerResponseBody {
	body := &DeleteInternalServerResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListPayload builds a objects service list endpoint payload.
func NewListPayload(observationDate string, offset int) *objects.ListPayload {
	v := &objects.ListPayload{}
	v.ObservationDate = observationDate
	v.Offset = offset

	return v
}

// NewFindPayload builds a objects service find endpoint payload.
func NewFindPayload(id int) *objects.FindPayload {
	v := &objects.FindPayload{}
	v.ID = id

	return v
}

// NewAddPayload builds a objects service add endpoint payload.
func NewAddPayload(body struct {
	ID              *int    `form:"Id" json:"Id" xml:"Id"`
	Name            *string `form:"Name" json:"Name" xml:"Name"`
	ObservationTime *int64  `form:"ObservationTime" json:"ObservationTime" xml:"ObservationTime"`
}) *objects.AddPayload {
	v := &objects.AddPayload{}
	if body.ID != nil {
		v.ID = *body.ID
	}
	if body.Name != nil {
		v.Name = *body.Name
	}
	if body.ObservationTime != nil {
		v.ObservationTime = *body.ObservationTime
	}

	return v
}

// NewUpdatePayload builds a objects service update endpoint payload.
func NewUpdatePayload(id int, name *string, observationTime *int64) *objects.UpdatePayload {
	v := &objects.UpdatePayload{}
	v.ID = id
	v.Name = name
	v.ObservationTime = observationTime

	return v
}

// NewDeletePayload builds a objects service delete endpoint payload.
func NewDeletePayload(id int) *objects.DeletePayload {
	v := &objects.DeletePayload{}
	v.ID = id

	return v
}
